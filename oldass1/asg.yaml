Description: Template for auto scaling group

Resources:
  ASGSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable HTTP and SSH access
      VpcId: !ImportValue AZStack:VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '5099'
          ToPort: '5099'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

  # Resource LaunchTemplate for EC2 instances (CloudShirt)
  launchTemplateCS:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: CloudShirtLT
      LaunchTemplateData: 
        InstanceType: t2.micro
        ImageId: ami-08b5b3a93ed654d19
        KeyName: vockey
        TagSpecifications:
        - ResourceType: instance
          Tags:
            - Key: Name
              Value: !Sub "CloudShirtApp"
        UserData: 
          Fn::Base64:
            Fn::Sub:
              - |
                #!/bin/bash

                # CloudShirt Application Setup Script
                # This script installs and configures everything needed to run the CloudShirt application
                # with an external SQL Server, RDS database and EFS file system

                # Install dotnet-sdk-6.0
                sudo yum update -y

                yum -y install nfs-utils
                mkdir /EFS
                mount -t nfs4 -o nfsvers=4.1,rsize=1048576,wsize=1048576,hard,timeo=600,retrans=2,noresvport ${EFS_DNS}.efs.us-east-1.amazonaws.com:/ /EFS # example EFS DNS
                cd /EFS
                sudo chmod go+rw .
                cd /

                sudo yum install -y dotnet-sdk-6.0 git
                export DOTNET_CLI_HOME=/root/.dotnet

                # Install git
                sudo yum install git -y
                sudo git clone https://github.com/looking4ward/CloudShirt.git

                # Update appsettings.json using defined variables
                sudo sed -i "s/Server.*CatalogDb;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/" CloudShirt/src/Web/appsettings.json
                sudo sed -i "s/Server.*Identity;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.Identity;/" CloudShirt/src/Web/appsettings.json
                sudo sed -i "s/Server.*CatalogDb;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.CatalogDb;/" CloudShirt/src/PublicApi/appsettings.json
                sudo sed -i "s/Server.*Identity;/Server=${RDS_ENDPOINT},1433;User ID=${RDS_USERNAME};Password=${RDS_PASSWORD};Initial Catalog=Microsoft.eShopOnWeb.Identity;/" CloudShirt/src/PublicApi/appsettings.json

                INSTANCE_PUBLIC_IP=$(wget -qO- http://checkip.amazonaws.com)
                # run the application in folder Web port 80
                cd CloudShirt/src/Web
                sudo dotnet build
                sudo dotnet run --urls "http://0.0.0.0:80/" >> /EFS/$INSTANCE_PUBLIC_IP.web.log 2>&1 &
                cd /

                # Run the application in folder PublicApi port 5009
                cd CloudShirt/src/PublicApi
                sudo dotnet build
                sudo dotnet run --urls "http://0.0.0.0:5099/"
              - RDS_ENDPOINT: 
                  Fn::ImportValue: DatabaseStack:RDSEndpoint
                RDS_USERNAME:
                  Fn::ImportValue: DatabaseStack:DBUsername
                RDS_PASSWORD:
                  Fn::ImportValue: DatabaseStack:DBPassword
                EFS_DNS:
                  Fn::ImportValue: EFSStack:EFSdns
                
        SecurityGroupIds:
          - !Ref ASGSecurityGroup
  
  # Resource AutoScalingGroup launch extra instances when needed
  AutoScalingGroupCS:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref launchTemplateCS
        Version: !GetAtt launchTemplateCS.LatestVersionNumber
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      VPCZoneIdentifier:
        - !ImportValue AZStack:PublicSubnet1
        - !ImportValue AZStack:PublicSubnet2
      TargetGroupARNs:
        - !ImportValue LBStack:TargetGroup

  UpScalingSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCS
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 4
      Recurrence: "0 22 * * MON-SUN" # 22:00 UTC is 18:00 in ET

  DownScalingSchedule:
    Type: AWS::AutoScaling::ScheduledAction
    Properties:
      AutoScalingGroupName: !Ref AutoScalingGroupCS
      MinSize: 2
      MaxSize: 4
      DesiredCapacity: 2
      Recurrence: "0 00 * * MON-SUN" # 00:00 UTC is 20:00 in ET
      
Outputs:
  AutoScalingGroupRef:
    Description: Reference to the AutoScalingGroup
    Value: !Ref AutoScalingGroupCS
    Export:
      Name: !Join [ ":", [ !Ref "AWS::StackName", "AutoscalingGroup" ] ]
